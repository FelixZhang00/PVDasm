get functions:
for(int i=0,j=1;i<fFunctionInfo.size();i++,j++){
				if(lstrcmp(fFunctionInfo[i].FunctionName,"")==0){
					wsprintf(temp,"%08X - %08X (Main)",fFunctionInfo[i].FunctionStart,fFunctionInfo[i].FunctionEnd);
				}
				else{
					wsprintf(temp,"%08X - %08X (%s)",fFunctionInfo[i].FunctionStart,fFunctionInfo[i].FunctionEnd,fFunctionInfo[i].FunctionName);
				}

				SendMessage(GetDlgItem(hWnd,IDC_FUNCTIONS_LIST),CB_ADDSTRING ,0,(LPARAM)&temp);
                SendMessage(GetDlgItem(hWnd,IDC_FUNCTIONS_LIST),CB_SETITEMDATA ,(WPARAM)j,(LPARAM)j-1);
			}





search Params for selected function:
DWORD index,address,size,PushCounter,i;
                    BOOL FoundCall=FALSE;
                    char temp[256],*ptr;

                    index =  SendMessage(GetDlgItem(hWnd,IDC_FUNCTIONS_LIST),CB_GETCURSEL ,0,0);
                    index=SendMessage(GetDlgItem(hWnd,IDC_FUNCTIONS_LIST),CB_GETITEMDATA ,index,0);
                    
                    if(index!=-1){ // if selected function is not the main
                        // search for a caller address
                        address=fFunctionInfo[index].FunctionStart; 
                        size=DisasmCodeFlow.size();
                        for(i=0;i<size;i++){                        
							if(DisasmCodeFlow[i].Branch_Destination==address){
                                if(DisasmCodeFlow[i].BranchFlow.Call==TRUE){                                
                                    FoundCall=TRUE;
                                    break;
                                }
							}
                        }

                        if(FoundCall){
                            PushCounter=0;
                            index=DisasmCodeFlow[i].Current_Index;
                            index--; // point to the PUSH instructions
                            for(;;){                            
                                strcpy(temp,DisasmDataLines[index].GetMnemonic());
                                ptr=temp;
                                while(*ptr!=' ')
                                    ptr++;
                                
                                *ptr=NULL;
                                if(lstrcmp(temp,"PUSH")==0 || lstrcmp(temp,"push")==0){
                                    PushCounter++;
                                    index--;
                                }
                                else break; // no more PUSHs
                            }
                        }
                        else return FALSE;
                        
                        if(PushCounter>0){
                            EnableWindow(GetDlgItem(hWnd,IDC_ADD_TYPE),TRUE);
                            SendMessage(GetDlgItem(hWnd,IDC_PARAM_TYPE),CB_SETCURSEL,2,0);
                            for(i=0;i<PushCounter;i++)
                                AddType(hWnd);
                        }
                    }




create the function:
CODE_SECTION codeSection;
                    CodeSectionItr CItr;
					int i;
					bool Found=FALSE;
                    char Buffer[256],Buffer2[256];

                    ZeroMemory(&codeSection,sizeof(CODE_SECTION));
                    GetWindowText(GetDlgItem(hWnd,IDC_PROTO_EDIT),Buffer,256);
                    GetWindowText(GetDlgItem(hWnd,IDC_PROC_EDIT),Buffer2,256);

                    if(StringLen(Buffer)==0 || StringLen(Buffer2)==0){
						MessageBox(hWnd,"Proc/Proto skeleton is empty\nCreating an Empty Definition...","Notice",MB_OK);                        
                    }

                    int index =  SendMessage(GetDlgItem(hWnd,IDC_FUNCTIONS_LIST),CB_GETCURSEL ,0,0);  
                    index=SendMessage(GetDlgItem(hWnd,IDC_FUNCTIONS_LIST),CB_GETITEMDATA ,index,0);  
                    
                    if(index!=-1){
                        codeSection.Start=fFunctionInfo[index].FunctionStart;
                        codeSection.End = fFunctionInfo[index].FunctionEnd;
                        codeSection.Index=index;
                        codeSection.Proto = new char[StringLen(Buffer)+1];
                        codeSection.Proc= new char[StringLen(Buffer2)+1];
                        lstrcpy(codeSection.Proto,Buffer);
                        lstrcpy(codeSection.Proc,Buffer2);
                        i=0;
						if(StringLen(Buffer2)!=0){
							while(Buffer2[i]!=' '){
								i++;
							}
						}
                        Buffer[i]=NULL;
						if(StringLen(Buffer)!=0){						
							wsprintf(Buffer2,"%s endp",Buffer);
							codeSection.Endp = new char[StringLen(Buffer2)+1];
							lstrcpy(codeSection.Endp,Buffer2);
						}
						else{ // main
							codeSection.Endp = new char[1];
							lstrcpy(codeSection.Endp,"");
						}

                        CItr = CodeSections.begin();
                        if(CItr == CodeSections.end()){
                          CodeSections.insert(CodeSections.end(),codeSection);
                        }
                        else{
                            for(int i=0;i<CodeSections.size();i++){
                                if(
                                    CodeSections[i].Start==codeSection.Start &&
                                    CodeSections[i].End==codeSection.End
                                  )
                                {
                                    delete[]CodeSections[i].Proc;
                                    delete[]CodeSections[i].Proto;
                                    CodeSections[i].Proc = new char[StringLen(codeSection.Proc)+1];
                                    CodeSections[i].Proto = new char[StringLen(codeSection.Proto)+1];
                                    lstrcpy(CodeSections[i].Proc,codeSection.Proc);
                                    lstrcpy(CodeSections[i].Proto,codeSection.Proto);
                                    Found=TRUE;
                                    break;
                                }
                            }

                            if(Found==FALSE){
                                CodeSections.insert(CodeSections.end(),codeSection);
                            }
                        }
                    }